//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Player/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""CharacterPC"",
            ""id"": ""567ac48a-a3f3-4a33-91dc-25f5c9796434"",
            ""actions"": [
                {
                    ""name"": ""MovePC"",
                    ""type"": ""Value"",
                    ""id"": ""01aedc89-c5c3-4226-8986-1553b94c65c4"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""JumpPC"",
                    ""type"": ""Button"",
                    ""id"": ""6884edab-7a40-4157-a2cd-3f6263cc63dd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveDownPC"",
                    ""type"": ""Button"",
                    ""id"": ""b415d88b-8602-446c-a0f9-29898e40ecaf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""fb0855be-8ac9-42a6-a11b-843c117a89e5"",
                    ""path"": ""1DAxis(whichSideWins=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePC"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""8c74652f-71e9-4e94-9768-a9b52bef7ec6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePC"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""0d969759-73ed-4c5f-8ac1-a63b916df744"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePC"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4298660e-ebae-4017-aeb8-80bc895e519a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JumpPC"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f0fa8118-cdd6-4b49-a2c9-07e09e27b495"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDownPC"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CharacterTouch"",
            ""id"": ""f20e1fd0-9c2b-4ce6-8ba5-097d89e517b6"",
            ""actions"": [
                {
                    ""name"": ""MoveSwipe"",
                    ""type"": ""Value"",
                    ""id"": ""73f125f3-71ad-40f7-b82c-67d87ac816cd"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""JumpSwipe"",
                    ""type"": ""Value"",
                    ""id"": ""5ca1c965-5a5e-43ee-a719-75b461d30e31"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DownSwipe"",
                    ""type"": ""Value"",
                    ""id"": ""3007f554-99f6-48d1-98ea-3e9eadb4ce52"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""593f59bb-bad9-480f-990b-d98d02431c84"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveSwipe"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""e98946f3-c2c7-4f91-8275-5fbff6afe2df"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveSwipe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""68dd8228-7ac1-417e-838e-b6957dbafc43"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveSwipe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b6f98290-91a1-4751-ade3-f16b6aebabb9"",
                    ""path"": ""<Touchscreen>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JumpSwipe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b0badc6-9384-4d04-8ce4-e2c955cdf7b8"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownSwipe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard and Mouse"",
            ""bindingGroup"": ""Keyboard and Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touchscreen"",
            ""bindingGroup"": ""Touchscreen"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // CharacterPC
        m_CharacterPC = asset.FindActionMap("CharacterPC", throwIfNotFound: true);
        m_CharacterPC_MovePC = m_CharacterPC.FindAction("MovePC", throwIfNotFound: true);
        m_CharacterPC_JumpPC = m_CharacterPC.FindAction("JumpPC", throwIfNotFound: true);
        m_CharacterPC_MoveDownPC = m_CharacterPC.FindAction("MoveDownPC", throwIfNotFound: true);
        // CharacterTouch
        m_CharacterTouch = asset.FindActionMap("CharacterTouch", throwIfNotFound: true);
        m_CharacterTouch_MoveSwipe = m_CharacterTouch.FindAction("MoveSwipe", throwIfNotFound: true);
        m_CharacterTouch_JumpSwipe = m_CharacterTouch.FindAction("JumpSwipe", throwIfNotFound: true);
        m_CharacterTouch_DownSwipe = m_CharacterTouch.FindAction("DownSwipe", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CharacterPC
    private readonly InputActionMap m_CharacterPC;
    private List<ICharacterPCActions> m_CharacterPCActionsCallbackInterfaces = new List<ICharacterPCActions>();
    private readonly InputAction m_CharacterPC_MovePC;
    private readonly InputAction m_CharacterPC_JumpPC;
    private readonly InputAction m_CharacterPC_MoveDownPC;
    public struct CharacterPCActions
    {
        private @PlayerInput m_Wrapper;
        public CharacterPCActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MovePC => m_Wrapper.m_CharacterPC_MovePC;
        public InputAction @JumpPC => m_Wrapper.m_CharacterPC_JumpPC;
        public InputAction @MoveDownPC => m_Wrapper.m_CharacterPC_MoveDownPC;
        public InputActionMap Get() { return m_Wrapper.m_CharacterPC; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterPCActions set) { return set.Get(); }
        public void AddCallbacks(ICharacterPCActions instance)
        {
            if (instance == null || m_Wrapper.m_CharacterPCActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CharacterPCActionsCallbackInterfaces.Add(instance);
            @MovePC.started += instance.OnMovePC;
            @MovePC.performed += instance.OnMovePC;
            @MovePC.canceled += instance.OnMovePC;
            @JumpPC.started += instance.OnJumpPC;
            @JumpPC.performed += instance.OnJumpPC;
            @JumpPC.canceled += instance.OnJumpPC;
            @MoveDownPC.started += instance.OnMoveDownPC;
            @MoveDownPC.performed += instance.OnMoveDownPC;
            @MoveDownPC.canceled += instance.OnMoveDownPC;
        }

        private void UnregisterCallbacks(ICharacterPCActions instance)
        {
            @MovePC.started -= instance.OnMovePC;
            @MovePC.performed -= instance.OnMovePC;
            @MovePC.canceled -= instance.OnMovePC;
            @JumpPC.started -= instance.OnJumpPC;
            @JumpPC.performed -= instance.OnJumpPC;
            @JumpPC.canceled -= instance.OnJumpPC;
            @MoveDownPC.started -= instance.OnMoveDownPC;
            @MoveDownPC.performed -= instance.OnMoveDownPC;
            @MoveDownPC.canceled -= instance.OnMoveDownPC;
        }

        public void RemoveCallbacks(ICharacterPCActions instance)
        {
            if (m_Wrapper.m_CharacterPCActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICharacterPCActions instance)
        {
            foreach (var item in m_Wrapper.m_CharacterPCActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CharacterPCActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CharacterPCActions @CharacterPC => new CharacterPCActions(this);

    // CharacterTouch
    private readonly InputActionMap m_CharacterTouch;
    private List<ICharacterTouchActions> m_CharacterTouchActionsCallbackInterfaces = new List<ICharacterTouchActions>();
    private readonly InputAction m_CharacterTouch_MoveSwipe;
    private readonly InputAction m_CharacterTouch_JumpSwipe;
    private readonly InputAction m_CharacterTouch_DownSwipe;
    public struct CharacterTouchActions
    {
        private @PlayerInput m_Wrapper;
        public CharacterTouchActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveSwipe => m_Wrapper.m_CharacterTouch_MoveSwipe;
        public InputAction @JumpSwipe => m_Wrapper.m_CharacterTouch_JumpSwipe;
        public InputAction @DownSwipe => m_Wrapper.m_CharacterTouch_DownSwipe;
        public InputActionMap Get() { return m_Wrapper.m_CharacterTouch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterTouchActions set) { return set.Get(); }
        public void AddCallbacks(ICharacterTouchActions instance)
        {
            if (instance == null || m_Wrapper.m_CharacterTouchActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CharacterTouchActionsCallbackInterfaces.Add(instance);
            @MoveSwipe.started += instance.OnMoveSwipe;
            @MoveSwipe.performed += instance.OnMoveSwipe;
            @MoveSwipe.canceled += instance.OnMoveSwipe;
            @JumpSwipe.started += instance.OnJumpSwipe;
            @JumpSwipe.performed += instance.OnJumpSwipe;
            @JumpSwipe.canceled += instance.OnJumpSwipe;
            @DownSwipe.started += instance.OnDownSwipe;
            @DownSwipe.performed += instance.OnDownSwipe;
            @DownSwipe.canceled += instance.OnDownSwipe;
        }

        private void UnregisterCallbacks(ICharacterTouchActions instance)
        {
            @MoveSwipe.started -= instance.OnMoveSwipe;
            @MoveSwipe.performed -= instance.OnMoveSwipe;
            @MoveSwipe.canceled -= instance.OnMoveSwipe;
            @JumpSwipe.started -= instance.OnJumpSwipe;
            @JumpSwipe.performed -= instance.OnJumpSwipe;
            @JumpSwipe.canceled -= instance.OnJumpSwipe;
            @DownSwipe.started -= instance.OnDownSwipe;
            @DownSwipe.performed -= instance.OnDownSwipe;
            @DownSwipe.canceled -= instance.OnDownSwipe;
        }

        public void RemoveCallbacks(ICharacterTouchActions instance)
        {
            if (m_Wrapper.m_CharacterTouchActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICharacterTouchActions instance)
        {
            foreach (var item in m_Wrapper.m_CharacterTouchActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CharacterTouchActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CharacterTouchActions @CharacterTouch => new CharacterTouchActions(this);
    private int m_KeyboardandMouseSchemeIndex = -1;
    public InputControlScheme KeyboardandMouseScheme
    {
        get
        {
            if (m_KeyboardandMouseSchemeIndex == -1) m_KeyboardandMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard and Mouse");
            return asset.controlSchemes[m_KeyboardandMouseSchemeIndex];
        }
    }
    private int m_TouchscreenSchemeIndex = -1;
    public InputControlScheme TouchscreenScheme
    {
        get
        {
            if (m_TouchscreenSchemeIndex == -1) m_TouchscreenSchemeIndex = asset.FindControlSchemeIndex("Touchscreen");
            return asset.controlSchemes[m_TouchscreenSchemeIndex];
        }
    }
    public interface ICharacterPCActions
    {
        void OnMovePC(InputAction.CallbackContext context);
        void OnJumpPC(InputAction.CallbackContext context);
        void OnMoveDownPC(InputAction.CallbackContext context);
    }
    public interface ICharacterTouchActions
    {
        void OnMoveSwipe(InputAction.CallbackContext context);
        void OnJumpSwipe(InputAction.CallbackContext context);
        void OnDownSwipe(InputAction.CallbackContext context);
    }
}
